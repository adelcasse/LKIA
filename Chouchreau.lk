/*******************
* CUSTOM CONSTANTS *
*******************/

// Strategies
global STRATEGY_DEFENSIVE = 0;
global STRATEGY_MEDIUM = 1;
global STRATEGY_OFFENSIVE = 2;


/*******************
* GLOBAL CONSTANTS *
*******************/

// Leeks
global ME = getLeek();
/*global ENEMIES = getEnemies();
global NB_ENEMIES = getEnemiesCount();
global ALLIES = getAllies();
global NB_ALLIES = getAlliesCount();

// Game mode
global SOLO_MODE = (NB_ENEMIES == 1 && NB_ALLIES == 0);
global TEAM_MODE = !(NB_ENEMIES == 1 && NB_ALLIES == 0);*/

// Actions
global ACTION_STOP = 0;
global ACTION_MOVE_TOWARD_LEEK = 1;
global ACTION_MOVE_AWAY_LEEK = 2;
global ACTION_USE_WEAPON = 3;
global ACTION_USE_CHIP = 4;

global ACTION_SEQUENCE = 100;


global CHIPS_UNAVAILABLE = [];

/************************
* FUNCTIONAL PARAMETERS *
************************/

//Parameters
global WEAPON = WEAPON_DOUBLE_GUN;

//Context variables
global CHIPS_COOLDOWN = [];
global CHIPS_INVALID = []; 
global WEAPONS_INVALID = [];
global STEP_BACK_BLOCKED = false;

global INIT_CHIP = false;
global INIT_SHIFT = 2;

global ENEMIES_FORCE = [];
global ENEMIES_CHIPS_TURNS = [];

global STARTING_LEEK;


global SAFE_COUNTER = 0;

/*****************
* BASE ALGORITHM *
*****************/

debug("My Life : " + getLife(ME));
debug("Enemy Life : " + getLife(getNearestEnemy()));
debug("My Force : " + getForce(ME));
debug("Enemy Force : " + getForce(getNearestEnemy()));

if(getWeapon() != WEAPON){
        setWeapon(WEAPON);
}

// For the moment, I assume I am always solo
var action;
INIT_CHIP = false;
STEP_BACK_BLOCKED = false;
CHIPS_COOLDOWN = [];
CHIPS_INVALID = [];
WEAPONS_INVALID = [];
do {
        debug("-------------------- NOUVEAU TOUR -----------------------");
        action = decideNextActionSolo();
        executeAction(action);
} while(action !== STOP());


//Take a decision on what will be the next action
function decideNextActionSolo() {

        if(getInstructionsCount() >= INSTRUCTIONS_LIMIT-100){
                debug("ALERT : reached max instructions !");
                return STOP();
        }

        //Define useful variables
        var ENEMY = getNearestEnemy();


        debug("Distance : " + distance(ME, ENEMY));


		if(tooCloseToUseWeapon(ME, ENEMY, WEAPON) && !STEP_BACK_BLOCKED){
            debug("====> We can use weapons : fire");
            return AWAY_FROM(ENEMY);
        } else if(canUseWeapons(ME, ENEMY, WEAPON)){
            debug("====> We can use weapons : fire");
            return FIRE(ENEMY);
        } else if(canAdvanceToUseWeapon(ME, ENEMY, WEAPON)){
            debug("====> We can advance to use weapons : go");
            return TOWARD(ENEMY);
        } else if(canUseChips(ME, ENEMY, CHIP_ICE)){
            debug("====> We can use ICE : fire");
            return ICE(ENEMY);
        } else if(canAdvanceToUseChip(ME, ENEMY, CHIP_ICE)){
            debug("====> advance to use ICE : go");
            return TOWARD(ENEMY);
        } else if(canUseChips(ME, ENEMY, CHIP_SHOCK)){
            debug("====> We can use SHOCK : fire");
            return SHOCK(ENEMY);
        } else if(canAdvanceToUseChip(ME, ENEMY, CHIP_SHOCK)){
            debug("====> advance to use SHOCK : go");
            return TOWARD(ENEMY);
        }

        // We were not able to attack :(

        // Let's see how we should move now depending on the strategy
        if(getMP() > 0){

                if(canAdvanceWithoutDanger(ME, ENEMY) && distance(ME, ENEMY) > 1){
                    debug("====> We can advance without danger : go");
                    return TOWARD(ENEMY);
                }

                else if(safe(ME,ENEMY) && SAFE_COUNTER < 15){
                    debug("====> We are safe : stay here");
                    SAFE_COUNTER++;
                    return STOP();
                } else if(safe(ME,ENEMY)) {
                	SAFE_COUNTER = 0;
                	return TOWARD(ENEMY);
                }

                else if(canRun(ME, ENEMY, WEAPON, CHIP_SPARK, STRATEGY_MEDIUM) && !STEP_BACK_BLOCKED){
                    debug("====> We can run : go");
                    return AWAY_FROM(ENEMY);
                } else if(distance(ME, ENEMY)){
                	return TOWARD(ENEMY);
                }
        }


        return STOP();
}

function executeAction(action) {
        var actionType = action[0];

        if(actionType === ACTION_MOVE_TOWARD_LEEK){
                debug("==> ACTION_MOVE_TOWARD_LEEK");
                //get arguments for this action
                var leek = action[1];
                //execute action
                if(moveToward(leek, 1) > 0){
                    WEAPONS_INVALID = [];
                    CHIPS_INVALID = [];
                    STEP_BACK_BLOCKED = false;
                }
        }

        else if(actionType === ACTION_MOVE_AWAY_LEEK) {
                debug("==> ACTION_MOVE_AWAY_LEEK");
                //get arguments for this action
                var leek = action[1];
                //execute action
                if(0 === moveAwayFrom(leek, 1)){
                    STEP_BACK_BLOCKED = true;
                } else {
                    STEP_BACK_BLOCKED = false;
                    WEAPONS_INVALID = [];
                    CHIPS_INVALID = [];
                }
        }

        else if(actionType === ACTION_USE_WEAPON) {
                debug("==> ACTION_USE_WEAPON");
                //get arguments for this action
                var leek = action[1];
                //execute action

                var wr = useWeapon(leek);

                if(wr === USE_INVALID_POSITION){
                    debug("(((((( INVALID POSITION ))))))");
                    push(WEAPONS_INVALID, WEAPON);
                }
        }

        else if(actionType === ACTION_USE_CHIP) {
                debug("==> ACTION_USE_CHIP");
                //get arguments for this action
                var chip = action[1];
                var leek = action[2];
                //execute action

                debug("Chip :" + getChipName(chip));

                var cr = useChip(chip, leek);

                if(cr === USE_INVALID_POSITION){
                    debug("(((((( INVALID POSITION ))))))");
                    push(CHIPS_INVALID, chip);
                }

                if(cr === USE_INVALID_COOLDOWN){
                    debug("(((((( INVALID COOLDOWN ))))))");
                    push(CHIPS_COOLDOWN, chip);
                }
        } 

        else if(actionType === ACTION_STOP){
                debug("==> ACTION_STOP");
                //useChip(CHIP_CURE, ME);
                /*if(!inArray(CHIPS_UNAVAILABLE, CHIP_BANDAGE)){
                    useChip(CHIP_BANDAGE, ME);
                }*/
        }

        else if(actionType === ACTION_SEQUENCE){
                debug("===> ACTION_SEQUENCE");
                var array = action;
                remove(array, 0);
                for(var subAction in array){
                        executeAction(subAction);
                }
        }

        return;
}


/***********************
* FUNCTIONAL FUNCTIONS *
***********************/

//Checks on if we can use things
function canUseWeapons(me, enemy, weapon){
        var maxScope;
        if(weapon === WEAPON_DOUBLE_GUN){
            maxScope = 7;
        } else if(weapon === WEAPON_MAGNUM){
            maxScope = 8;
        } else if(weapon === WEAPON_PISTOL) {
        	maxScope = 7;
        } else {
            maxScope = 7;
        }
        
        return !inArray(WEAPONS_INVALID, weapon) && (distance(me, enemy) <= maxScope) && getTP()>=getWeaponCost(weapon);
}

function canAdvanceToUseWeapon(me, enemy, weapon){
        var maxScope;
        if(weapon === WEAPON_DOUBLE_GUN){
            maxScope = 7;
        } else if(weapon === WEAPON_MAGNUM){
            maxScope = 8;
        } else if(weapon === WEAPON_PISTOL){
            maxScope = 7;
        } else {
            maxScope = 7;
        }
        var minScope;
        if(weapon === WEAPON_DOUBLE_GUN){
            minScope = 2;
        } else if(weapon === WEAPON_MAGNUM){
            minScope = 1;
        } else if(weapon === WEAPON_PISTOL){
            minScope = 1;
        } else {
            minScope = 1;
        }
        var mp = getMP();
        var dist = distance(me, enemy);
        return mp > 0 && !inArray(WEAPONS_INVALID, weapon) && (dist-mp <= maxScope && dist-1 >= minScope) && getTP()>=getWeaponCost(weapon);
}

function canUseChips(me, enemy, chip){
        if(inArray(CHIPS_UNAVAILABLE, chip)){
            return false;
        }
        var maxScope;
        if(chip === CHIP_PEBBLE){
            maxScope = 5;
        } else if(chip === CHIP_SPARK){
            maxScope = 10;
        } else if(chip === CHIP_BANDAGE){
            maxScope = 6;
        } else if(chip === CHIP_ICE){
            maxScope = 8;
        } else if(chip === CHIP_FLAME){
            maxScope = 7;
        } else if(chip === CHIP_SHOCK){
            maxScope = 5;
        }
        return !inArray(CHIPS_COOLDOWN, chip) && !inArray(CHIPS_INVALID, chip) && distance(me, enemy) <= maxScope && getTP()>=getChipCost(chip);
}

function canAdvanceToUseChip(me, enemy, chip){
        if(inArray(CHIPS_UNAVAILABLE, chip)){
            return false;
        }
        var maxScope;
        if(chip === CHIP_PEBBLE){
            maxScope = 5;
        } else if(chip === CHIP_SPARK){
            maxScope = 10;
        } else if(chip === CHIP_ICE){
            maxScope = 8;
        } else if(chip === CHIP_FLAME){
            maxScope = 7;
        } else if(chip === CHIP_SHOCK){
            maxScope = 5;
        }
        var minScope;
        if(chip === CHIP_PEBBLE){
            minScope = 1;
        } else if(chip === CHIP_SPARK){
            minScope = 1;
        } else if(chip === CHIP_ICE){
            minScope = 1;
        } else if(chip === CHIP_FLAME){
            minScope = 2;
        } else if(chip === CHIP_SHOCK){
            minScope = 5;
        }
        var mp = getMP();
        var dist = distance(me, enemy);
        return mp > 0 && !inArray(CHIPS_INVALID, chip) && !inArray(CHIPS_COOLDOWN, chip) && dist-mp <= maxScope && dist-1 >= minScope && getTP()>=getChipCost(chip);
}

function tooCloseToUseWeapon(me, enemy, weapon){
        var minScope = getWeaponMinScope(weapon);
        if(weapon === WEAPON_DOUBLE_GUN){
            minScope = 2;
        } else if(weapon === WEAPON_MAGNUM){
            minScope = 1;
        } else {
            minScope = 1;
        }
        return distance(me, enemy) < minScope;
}


function canAdvanceWithoutDanger(me, enemy){
        var maxScope;
        maxScope = 10;
        var dist = distance(me, enemy);
        var enemy_mp = getMP();
        var mp = getMP();
        var danger = maxScope;
        return mp > 0 && dist-1-enemy_mp > danger;
}

function safe(me, enemy){
        var dist = distance(me, enemy);
        var enemy_mp = getMP();
        var danger = 10;
        return dist > danger + enemy_mp;
}

function canRun(me, enemy, weapon, chip, strategy){
    var dist = distance(me, enemy);
    var weaponScope;
    if(weapon === WEAPON_DOUBLE_GUN){
        weaponScope = 7;
    } else if(weapon === WEAPON_MAGNUM){
        weaponScope = 8;
    } else if(weapon === WEAPON_PISTOL){
        weaponScope = 7;
    } else {
        weaponScope = 7;
    }
    var chipScope;
    if(chip === CHIP_PEBBLE){
        chipScope = 5;
    } else if(chip === CHIP_SPARK){
        chipScope = 10;
    } else if(chip === CHIP_ICE){
        chipScope = 8;
    } else if(chip === CHIP_SHOCK){
        chipScope = 7;
    }

    if(getMP() == 0){
        return false;
    }

    if(dist-getMP() <= weaponScope && dist-getMP()+getMP() > weaponScope){
        return true;
    }

    if(strategy == STRATEGY_DEFENSIVE && dist-getMP() <= chipScope && dist-getMP()+getMP() > chipScope){
        return true;
    }
    return false;
}


// Get the distance between Leek1 and Leek2
function distance(leek1, leek2){
        return getCellDistance(getCell(leek1), getCell(leek2));
}

function inDanger(leek){
        return getLife(leek) < 100;
}

function displayChip(){

}

function SPARK(leek){
        return [ACTION_USE_CHIP, CHIP_SPARK, leek];
}

function FLAME(leek){
        return [ACTION_USE_CHIP, CHIP_FLAME, leek];
}

function BANDAGE(leek){
        push(CHIPS_COOLDOWN, CHIP_BANDAGE);
        return [ACTION_USE_CHIP, CHIP_BANDAGE, leek];
}

function PEBBLE(leek){
        push(CHIPS_COOLDOWN, CHIP_PEBBLE);
        return [ACTION_USE_CHIP, CHIP_PEBBLE, leek];
}

function ICE(leek){
        push(CHIPS_COOLDOWN, CHIP_ICE);
        return [ACTION_USE_CHIP, CHIP_ICE, leek];
}

function SHOCK(leek){
        push(CHIPS_COOLDOWN, CHIP_SHOCK);
        return [ACTION_USE_CHIP, CHIP_SHOCK, leek];
}

function STEROID(leek){
        push(CHIPS_COOLDOWN, CHIP_STEROID);
        return [ACTION_USE_CHIP, CHIP_STEROID, leek];
}

function HELMET(leek){
        push(CHIPS_COOLDOWN, CHIP_HELMET);
        return [ACTION_USE_CHIP, CHIP_HELMET, leek];
}

function MOTIVATION(leek){
        push(CHIPS_COOLDOWN, CHIP_MOTIVATION);
        return [ACTION_USE_CHIP, CHIP_MOTIVATION, leek];
}

function CURE(leek){
        push(CHIPS_COOLDOWN, CHIP_CURE);
        return [ACTION_USE_CHIP, CHIP_CURE, leek];
}

function STRETCH(leek){
        push(CHIPS_COOLDOWN, CHIP_STRETCHING);
        return [ACTION_USE_CHIP, CHIP_STRETCHING, leek];
}

function PROTEIN(leek){
        push(CHIPS_COOLDOWN, CHIP_PROTEIN);
        return [ACTION_USE_CHIP, CHIP_PROTEIN, leek];
}

function FIRE(leek){
        return [ACTION_USE_WEAPON, leek];
}

function TOWARD(leek){
        return [ACTION_MOVE_TOWARD_LEEK, leek];
}

function AWAY_FROM(leek){
        return [ACTION_MOVE_AWAY_LEEK, leek];
}

function STOP(){
        return [ACTION_STOP];
}
